[gd_scene load_steps=8 format=3 uid="uid://qacyjwmukelh"]

[ext_resource type="PackedScene" uid="uid://dfgy8cgabcha0" path="res://Vamp-Surv-Clone/legacy/interaction/interaction_controller.tscn" id="3_67cmi"]
[ext_resource type="PackedScene" uid="uid://cckqb688abpos" path="res://Vamp-Surv-Clone/scenes/components/ui_counter_component/UI_CounterComponent.tscn" id="3_o1je1"]
[ext_resource type="Texture2D" uid="uid://d0mgmiqn2uj7w" path="res://Vamp-Surv-Clone/asset_lib/hud/simple_dot.png" id="4_gpkeg"]

[sub_resource type="GDScript" id="GDScript_iwpsm"]
script/source = "# ProtoController v1.0 by Brackeys
# CC0 License
# Intended for rapid prototyping of first-person games.
# Happy prototyping!
class_name player_controller
extends CharacterBody3D

# Movement Component
@export var can_move : bool = true
@export var has_gravity : bool = true
@export var can_jump : bool = true
@export var can_sprint : bool = false
@export var can_freefly : bool = false

@export_group(\"Speeds\")
@export var look_speed : float = 0.002
@export var base_speed : float = 7.0
@export var jump_velocity : float = 4.5
@export var sprint_speed : float = 10.0
@export var freefly_speed : float = 25.0

# Player Controller Component
@export_group(\"Input Actions\")
@export var input_left : String = \"ui_left\"
@export var input_right : String = \"ui_right\"
@export var input_forward : String = \"ui_up\"
@export var input_back : String = \"ui_down\"
@export var input_jump : String = \"ui_accept\"
@export var input_sprint : String = \"sprint\"
@export var input_freefly : String = \"freefly\"

# Player Controller Component
var mouse_captured : bool = false
var look_rotation : Vector2
var move_speed : float = 0.0
var freeflying : bool = false

## IMPORTANT REFERENCES
@onready var head: Node3D = $Head
@onready var collider: CollisionShape3D = $Collider

func _ready() -> void:
	check_input_mappings()
	look_rotation.y = rotation.y
	look_rotation.x = head.rotation.x

func _unhandled_input(event: InputEvent) -> void:
	# Mouse capturing
	if Input.is_mouse_button_pressed(MOUSE_BUTTON_LEFT):
		capture_mouse()
	if Input.is_key_pressed(KEY_ESCAPE):
		release_mouse()
	
	# Look around
	if mouse_captured and event is InputEventMouseMotion:
		rotate_look(event.relative)
	
	# Toggle freefly mode
	if can_freefly and Input.is_action_just_pressed(input_freefly):
		if not freeflying:
			enable_freefly()
		else:
			disable_freefly()

func _physics_process(delta: float) -> void:
	### Freefly debug component ###
	if can_freefly and freeflying:
		var input_dir := Input.get_vector(input_left, input_right, input_forward, input_back)
		var motion := (head.global_basis * Vector3(input_dir.x, 0, input_dir.y)).normalized()
		motion *= freefly_speed * delta
		move_and_collide(motion)
		return

	# Modify speed based on sprinting
	if can_sprint and Input.is_action_pressed(input_sprint):
		move_speed = sprint_speed
	else:
		move_speed = base_speed
	
	# Apply desired movement to velocity
	if can_move:
		var input_dir := Input.get_vector(input_left, input_right, input_forward, input_back)
		var move_dir := (transform.basis * Vector3(input_dir.x, 0, input_dir.y)).normalized()

## Movement Related
		if move_dir:
			velocity.x = move_dir.x * move_speed
			velocity.z = move_dir.z * move_speed
		else:
			velocity.x = move_toward(velocity.x, 0, move_speed)
			velocity.z = move_toward(velocity.z, 0, move_speed)
	else:
		velocity.x = 0
		velocity.y = 0
	
	# Use velocity to actually move
	move_and_slide()


## Rotate us to look around.
## Base of controller rotates around y (left/right). Head rotates around x (up/down).
## Modifies look_rotation based on rot_input, then resets basis and rotates by look_rotation.
func rotate_look(rot_input : Vector2):
	
	look_rotation.x -= rot_input.y * look_speed
	look_rotation.x = clamp(look_rotation.x, deg_to_rad(-85), deg_to_rad(85))
	head.transform.basis = Basis()
	head.rotate_x(look_rotation.x)
	
	look_rotation.y -= rot_input.x * look_speed
	transform.basis = Basis()
	rotate_y(look_rotation.y)



func enable_freefly():
	collider.disabled = true
	freeflying = true
	velocity = Vector3.ZERO

func disable_freefly():
	collider.disabled = false
	freeflying = false


func capture_mouse():
	Input.set_mouse_mode(Input.MOUSE_MODE_CAPTURED)
	mouse_captured = true

func release_mouse():
	Input.set_mouse_mode(Input.MOUSE_MODE_VISIBLE)
	mouse_captured = false


## Checks if some Input Actions haven't been created.
## Disables functionality accordingly.
func check_input_mappings():
	if can_move and not InputMap.has_action(input_left):
		push_error(\"Movement disabled. No InputAction found for input_left: \" + input_left)
		can_move = false
	if can_move and not InputMap.has_action(input_right):
		push_error(\"Movement disabled. No InputAction found for input_right: \" + input_right)
		can_move = false
	if can_move and not InputMap.has_action(input_forward):
		push_error(\"Movement disabled. No InputAction found for input_forward: \" + input_forward)
		can_move = false
	if can_move and not InputMap.has_action(input_back):
		push_error(\"Movement disabled. No InputAction found for input_back: \" + input_back)
		can_move = false
	if can_jump and not InputMap.has_action(input_jump):
		push_error(\"Jumping disabled. No InputAction found for input_jump: \" + input_jump)
		can_jump = false
	if can_sprint and not InputMap.has_action(input_sprint):
		push_error(\"Sprinting disabled. No InputAction found for input_sprint: \" + input_sprint)
		can_sprint = false
	if can_freefly and not InputMap.has_action(input_freefly):
		push_error(\"Freefly disabled. No InputAction found for input_freefly: \" + input_freefly)
		can_freefly = false
"

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_o1je1"]
albedo_color = Color(0.91806, 0.575202, 0.222449, 1)

[sub_resource type="CapsuleMesh" id="CapsuleMesh_mylds"]
radius = 0.4
height = 1.8

[sub_resource type="CapsuleShape3D" id="CapsuleShape3D_a2n77"]
radius = 0.4
height = 1.8

[node name="player" type="Node3D"]

[node name="player_controller" type="CharacterBody3D" parent="." groups=["player"]]
script = SubResource("GDScript_iwpsm")

[node name="Mesh" type="MeshInstance3D" parent="player_controller"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.9, 0)
material_override = SubResource("StandardMaterial3D_o1je1")
cast_shadow = 0
mesh = SubResource("CapsuleMesh_mylds")
skeleton = NodePath("../..")

[node name="Collider" type="CollisionShape3D" parent="player_controller"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.9, 0)
shape = SubResource("CapsuleShape3D_a2n77")

[node name="Head" type="Node3D" parent="player_controller"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1.7, 0)

[node name="Camera3D" type="Camera3D" parent="player_controller/Head"]

[node name="interaction_controller" parent="player_controller/Head/Camera3D" instance=ExtResource("3_67cmi")]

[node name="HUD" type="Control" parent="player_controller"]
layout_mode = 3
anchors_preset = 0
offset_right = 1152.0
offset_bottom = 648.0
mouse_filter = 1
metadata/_edit_use_anchors_ = true

[node name="DisplayWallet" parent="player_controller/HUD" instance=ExtResource("3_o1je1")]
layout_mode = 0

[node name="crosshair" type="TextureRect" parent="player_controller/HUD"]
layout_mode = 1
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = -26.0
offset_top = -27.0
offset_right = -1.0
offset_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
scale = Vector2(2, 2)
texture = ExtResource("4_gpkeg")
expand_mode = 1
stretch_mode = 5
metadata/_edit_use_anchors_ = true
